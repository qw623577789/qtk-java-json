/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package team.ytk.json;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.NullNode;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.extension.ExtendWith;
import team.ytk.json.JSON;

class JSONTest {

    @Test
    void objectPut() {
        String json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            )
            .toString();
        System.out.println(json);
        Assertions.assertEquals(
            json,
            "{\"int\":1,\"string\":\"2\",\"float\":2.5,\"double\":2.5,\"BigDecimal\":1,\"boolean\":false,\"null\":null,\"map\":{\"a\":\"1\",\"b\":\"2\"},\"JSON.Map\":{\"m1\":\"1\",\"m2\":\"2\"},\"List\":[\"1\",\"2\"],\"JSON.List\":[1,2,4,5,[6,7]]}"
        );
    }

    @Test
    void arrayAdd() {
        String json = JSON
            .sAdd(
                1,
                3,
                new ArrayList<Integer>() {
                    {
                        add(6);
                        add(7);
                    }
                }
            )
            .add(2, 4)
            .add(5)
            .add(
                new ArrayList<Integer>() {
                    {
                        add(6);
                        add(7);
                    }
                }
            )
            .add((Object) null)
            .add(
                JSON
                    .sPut("array.map.int", 1)
                    .put(
                        "array.map.map",
                        new HashMap<String, String>() {
                            {
                                put("m1", "1");
                            }
                        }
                    )
                    .put(
                        "array.map.array",
                        new ArrayList<String>() {
                            {
                                add("1");
                            }
                        }
                    )
            )
            .concat(
                new ArrayList<String>() {
                    {
                        add("concat.1");
                    }
                }
            )
            .toString();
        System.out.println(json);
    }

    @Test
    void pointGet() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        // System.out.println(json.point(".ListMap[0].id3").get().asString());
        Assertions.assertEquals(json.point(".int").get().asInt(), 1);
        Assertions.assertEquals(json.point(".string").get().asString(), "2");
        Assertions.assertEquals(json.point(".float").get().asFloat(), 2.5f);
        Assertions.assertEquals(json.point(".double").get().asDouble(), 2.5d);
        Assertions.assertEquals(json.point(".BigDecimal").get().asBigDecimal(), BigDecimal.valueOf(1));
        Assertions.assertEquals(json.point(".boolean").get().asBoolean(), false);
        Assertions.assertEquals(json.point(".null").get().asNull(), null);

        Assertions.assertEquals(
            json.point(".map").get().asMap().hashCode(),
            new HashMap<String, String>() {
                {
                    put("a", "1");
                    put("b", "2");
                }
            }
                .hashCode()
        );

        Assertions.assertEquals(
            json.point(".\"JSON.Map\"").get().asMap().hashCode(),
            new HashMap<String, String>() {
                {
                    put("m1", "1");
                    put("m2", "2");
                }
            }
                .hashCode()
        );

        Assertions.assertEquals(
            json.point(".List").get().asList(String.class).hashCode(),
            new ArrayList<String>() {
                {
                    add("1");
                    add("2");
                }
            }
                .hashCode()
        );

        Assertions.assertEquals(json.point(".map.a").get().asString(), "1");
        Assertions.assertEquals(json.point(".List[0]").get().asString(), "1");
        Assertions.assertEquals(json.point(".ListMap[0].id1").get().asString(), "1");
        Assertions.assertEquals(
            json.point(".ListMap[0].id3[0]").get().asList().hashCode(),
            new ArrayList<Object>() {
                {
                    add(
                        new HashMap<>() {
                            {
                                put("id11", "1");
                                put("id22", "2");
                                put(
                                    "id33",
                                    new HashMap<String, String>() {
                                        {
                                            put("id333", "value1");
                                        }
                                    }
                                );
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        Assertions.assertEquals(
            json.point(".ListMap[0].id3[0][0]").get().asMap().hashCode(),
            new HashMap<>() {
                {
                    put("id11", "1");
                    put("id22", "2");
                    put(
                        "id33",
                        new HashMap<String, String>() {
                            {
                                put("id333", "value1");
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        Assertions.assertEquals(json.point(".ListMap[0].id1").get().asString(), "1");
        Assertions.assertEquals(
            json.point(".ListMap[*].id1").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("1");
                    add("11");
                }
            }
                .hashCode()
        );

        Assertions.assertEquals(
            json.point(".ListMap[*].id3[*][*].id11").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("1");
                    add("11");
                }
            }
                .hashCode()
        );

        Assertions.assertEquals(
            json.point(".ListMap[1].id3[*][*].id11").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("11");
                }
            }
                .hashCode()
        );

        Assertions.assertEquals(
            json.point(".ListMap[*].id3[*][*].id33.id333").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("value1");
                    add("value2");
                }
            }
                .hashCode()
        );

        Assertions.assertEquals(
            jsonArray.point(".[0].ListMap[*].id3[*][*].id33.id333").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("value1");
                    add("value2");
                }
            }
                .hashCode()
        );

        try {
            json.point(".ListMap[0].id3[0][0].id331.id333").get().asString();
            Assertions.assertTrue(false);
        } catch (NullPointerException error) {
            Assertions.assertTrue(true);
        } catch (Exception error) {
            Assertions.assertTrue(false);
        }

        Assertions.assertEquals(json.point(".ListMap[3]?.id3[0][0].id331.id333").get().asString(), null);

        Assertions.assertEquals(json.point(".ListMap[0].id33[0][0]?.id331.id333").get().asString(), null);

        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0].id331?.id333").get().asString(), null);

        Assertions.assertEquals(
            json.point(".ListMap1[*]?.id33[0][0].id331.id333").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        Assertions.assertEquals(json.point(".ListMap[0].id3[10][0]?.id33.id333").get().asString(), null);

        Assertions.assertEquals(
            json.point(".ListMap[*].id3[10][0]?.id33.id333").get().asList().hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        try {
            jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").get().asList();
            Assertions.assertTrue(false);
        } catch (NullPointerException error) {
            Assertions.assertTrue(true);
        } catch (Exception error) {
            Assertions.assertTrue(false);
        }

        Assertions.assertEquals(
            jsonArray.point(".[3]?.ListMap[*].id3[*][*].id33.id333").get().asList().hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );
    }

    @Test
    void pointHas() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        // System.out.println(json.point(".ListMap[0].id3").get().asString());
        Assertions.assertEquals(json.point(".int").has(), true);
        Assertions.assertEquals(json.point(".string").has(), true);
        Assertions.assertEquals(json.point(".float").has(), true);
        Assertions.assertEquals(json.point(".double").has(), true);
        Assertions.assertEquals(json.point(".BigDecimal").has(), true);
        Assertions.assertEquals(json.point(".boolean").has(), true);
        Assertions.assertEquals(json.point(".null").has(), true);

        Assertions.assertEquals(json.point(".map").has(), true);

        Assertions.assertEquals(json.point(".\"JSON.Map\"").has(), true);

        Assertions.assertEquals(json.point(".List").has(), true);

        Assertions.assertEquals(json.point(".map.a").has(), true);
        Assertions.assertEquals(json.point(".List[0]").has(), true);
        Assertions.assertEquals(json.point(".ListMap[0].id1").has(), true);
        Assertions.assertEquals(json.point(".ListMap[0].id3[0]").has(), true);
        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0]").has(), true);
        Assertions.assertEquals(json.point(".ListMap[0].id1").has(), true);
        Assertions.assertEquals(json.point(".ListMap[*].id1").has(), true);

        Assertions.assertEquals(json.point(".ListMap[*].id3[*][*].id11").has(), true);

        Assertions.assertEquals(json.point(".ListMap[1].id3[*][*].id11").has(), true);

        Assertions.assertEquals(json.point(".ListMap[*].id3[*][*].id33.id333").has(), true);

        Assertions.assertEquals(jsonArray.point(".[0].ListMap[*].id3[*][*].id33.id333").has(), true);

        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0].id331.id333").has(), false);

        Assertions.assertEquals(json.point(".ListMap[3]?.id3[0][0].id331.id333").has(), false);
        Assertions.assertEquals(json.point(".ListMap[3]?.id3[0][0].id331.id333").has(false), false);

        Assertions.assertEquals(json.point(".ListMap[0].id33[0][0]?.id331.id333").has(), false);
        Assertions.assertEquals(json.point(".ListMap[0].id33[0][0]?.id331.id333").has(false), false);

        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0].id331?.id333").has(), false);
        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0].id331?.id333").has(false), false);

        Assertions.assertEquals(json.point(".ListMap1[*]?.id33[0][0].id331.id333").has(), false);
        Assertions.assertEquals(json.point(".ListMap1[*]?.id33[0][0].id331.id333").has(false), false);

        Assertions.assertEquals(json.point(".ListMap[0].id3[10][0]?.id33.id333").has(), false);
        Assertions.assertEquals(json.point(".ListMap[0].id3[10][0]?.id33.id333").has(false), false);

        Assertions.assertEquals(json.point(".ListMap[*].id3[10][0]?.id33.id333").has(), false);
        Assertions.assertEquals(json.point(".ListMap[*].id3[10][0]?.id33.id333").has(false), false);

        Assertions.assertEquals(jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").has(), false);

        Assertions.assertEquals(jsonArray.point(".[3]?.ListMap[*].id3[*][*].id33.id333").has(), false);
        Assertions.assertEquals(jsonArray.point(".[3]?.ListMap[*].id3[*][*].id33.id333").has(false), false);
    }

    @Test
    void pointDetele() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json.deepCopy().put("int", 2));
        System.out.println(json.toString());

        json.point(".int").delete();
        Assertions.assertEquals(json.point(".int").has(), false);

        json.point(".\"JSON.Map\"").delete();
        Assertions.assertEquals(json.point(".\"JSON.Map\"").has(), false);

        json.point(".map.a").delete();
        Assertions.assertEquals(json.point(".map.a").has(), false);

        json.point(".ListMap[0].id3[0][0].id33.id333").delete();
        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0].id33.id333").has(), false);
        Assertions.assertEquals(json.point(".ListMap[1].id3[0][0].id33.id333").has(), true);

        json.point(".ListMap[1].id3[*][*].id11").delete();
        Assertions.assertEquals(json.point(".ListMap[1].id3[*][*].id11").has(), false);
        Assertions.assertEquals(json.point(".ListMap[1].id3[0][0].id11").has(), false);
        Assertions.assertEquals(json.point(".ListMap[1].id3[*][*].id22").has(), true);
        Assertions.assertEquals(json.point(".ListMap[1].id3[0][0].id22").has(), true);
        Assertions.assertEquals(json.point(".ListMap[0].id3[*][*].id11").has(), true);

        json.point(".ListMap[*].id3[*][*].id11").delete();
        Assertions.assertEquals(json.point(".ListMap[*].id3[*][*].id11").has(), false);
        Assertions.assertEquals(json.point(".ListMap[*].id3[0][0].id11").has(), false);
        Assertions.assertEquals(json.point(".ListMap[*].id3[*][*].id22").has(), true);
        Assertions.assertEquals(json.point(".ListMap[*].id3[0][0].id22").has(), true);
        Assertions.assertEquals(json.point(".ListMap[*].id3[*][*].id11").has(), false);

        json.point(".ListMap[0].id3[0][0]").delete();
        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0]").has(), false);
        Assertions.assertEquals(json.point(".ListMap[1].id3[0][0]").has(), true);
        Assertions.assertEquals(json.point(".ListMap[1].id3[0]").has(), true);

        json.point(".ListMap[0].id3[0]").delete();
        Assertions.assertEquals(json.point(".ListMap[0].id3[0]").has(), false);
        Assertions.assertEquals(json.point(".ListMap[0].id3").has(), true);
        Assertions.assertEquals(json.point(".ListMap[1].id3[0]").has(), true);

        json.point(".ListMap[0].id3").delete();
        Assertions.assertEquals(json.point(".ListMap[0].id3").has(), false);
        Assertions.assertEquals(json.point(".ListMap[1].id3").has(), true);

        json.point(".ListMap[*].id3").delete();
        Assertions.assertEquals(json.point(".ListMap[0].id3").has(), false);
        Assertions.assertEquals(json.point(".ListMap[1].id3").has(), false);

        json.point(".ListMap").delete();
        Assertions.assertEquals(json.point(".ListMap[0].id3").has(), false);
        Assertions.assertEquals(json.point(".ListMap[1].id3").has(), false);
        Assertions.assertEquals(json.point(".ListMap").has(), false);

        json.point(".ListMap[3]?.id3[0][0].id331.id333").delete();
        Assertions.assertEquals(json.point(".ListMap[0].id33[0][0]?.id331.id333").has(), false);

        json.point(".ListMap[0].id3[0][0].id331?.id333").delete();
        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0].id331?.id333").has(), false);

        json.point(".ListMap1[*]?.id33[0][0].id331.id333").delete();
        Assertions.assertEquals(json.point(".ListMap1[*]?.id33[0][0].id331.id333").has(false), false);

        jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").delete();
        Assertions.assertEquals(jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").has(), false);

        jsonArray.point(".[3]?.ListMap[*].id3[*][*].id33.id333").delete();
        Assertions.assertEquals(jsonArray.point(".[3]?.ListMap[*].id3[*][*].id33.id333").has(), false);

        jsonArray.point(".[0].ListMap[*].id3[*][*].id33.id333").delete();
        Assertions.assertEquals(jsonArray.point(".[0].ListMap[*].id3[*][*].id33.id333").has(), false);
        Assertions.assertEquals(jsonArray.point(".[1].ListMap[*].id3[*][*].id33.id333").has(), true);

        jsonArray.point(".[0]").delete();
        Assertions.assertEquals(jsonArray.point(".[0].int").has(), true);
        Assertions.assertEquals(jsonArray.point(".[0].int").get().asInt(), 2);
        Assertions.assertEquals(jsonArray.point(".[1].int").has(), false);
    }

    @Test
    void pointPut() {

        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json.deepCopy().put("int", 2));
        System.out.println(json.toString());

        json.point(".").put("ex_int", 1);
        Assertions.assertEquals(json.point(".ex_int").get().asInt(), 1);

        json.point(".").put("ext.int", 1);
        Assertions.assertEquals(json.point(".\"ext.int\"").get().asInt(), 1);

        json.point(".map").put("c", 1);
        Assertions.assertEquals(json.point(".map.c").get().asInt(), 1);

        json.point(".ListMap[0].id3[0][0].id33").put("id334", 1);
        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0].id33.id334").has(), true);
        Assertions.assertEquals(json.point(".ListMap[1].id3[0][0].id33.id334").has(), false);

        json.point(".ListMap[1].id3[*][*]").put("ext_id", 1);
        json.point(".ListMap[1]").point(".id3[*][*]").put("ext_id", 1);
        Assertions.assertEquals(json.point(".ListMap[1].id3[0][0].ext_id").has(), true);
        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0].ext_id").has(), false);

        json.point(".ListMap[*].id3[*][*]").put("ext_id2", 1);
        Assertions.assertEquals(json.point(".ListMap[0].id3[0][0].ext_id2").has(), true);
        Assertions.assertEquals(json.point(".ListMap[1].id3[0][0].ext_id2").has(), true);

        jsonArray.point(".[0].ListMap[*].id3[*][*].id33").put("ext_id3", 1);
        Assertions.assertEquals(jsonArray.point(".[0].ListMap[0].id3[0][0].id33.ext_id3").has(), true);
        Assertions.assertEquals(jsonArray.point(".[0].ListMap[1].id3[0][0].id33.ext_id3").has(), true);
        Assertions.assertEquals(jsonArray.point(".[1].ListMap[0].id3[0][0].id33.ext_id3").has(), false);
        Assertions.assertEquals(jsonArray.point(".[1].ListMap[1].id3[0][0].id33.ext_id3").has(), false);

        jsonArray.point(".[*].ListMap[*].id3[*][*].id33").put("ext_id3", 1);
        Assertions.assertEquals(jsonArray.point(".[0].ListMap[0].id3[0][0].id33.ext_id3").has(), true);
        Assertions.assertEquals(jsonArray.point(".[0].ListMap[1].id3[0][0].id33.ext_id3").has(), true);
        Assertions.assertEquals(jsonArray.point(".[1].ListMap[0].id3[0][0].id33.ext_id3").has(), true);
        Assertions.assertEquals(jsonArray.point(".[1].ListMap[1].id3[0][0].id33.ext_id3").has(), true);

        jsonArray.point(".[0]").put("ext_int", 1);
        Assertions.assertEquals(jsonArray.point(".[0].ext_int").has(), true);
        Assertions.assertEquals(jsonArray.point(".[1].ext_int").has(), false);
    }

    @Test
    void pointAdd() {
        JSON json = JSON
            .sPut("int", Boolean.valueOf("false"))
            .put("string", "2")
            .put("int2", Boolean.valueOf("false"))
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json.deepCopy().put("int", 2));
        System.out.println(json.toString());

        // json
        //     .point(".ListMap")
        //     .add(
        //         JSON
        //             .sPut("id1", "1")
        //             .put("id2", "2")
        //             .put(
        //                 "id3",
        //                 JSON.sAdd(
        //                     JSON.sAdd(
        //                         JSON
        //                             .sPut("id11", "1")
        //                             .put("id22", "2")
        //                             .put("id33", JSON.sPut("id333", "value1"))
        //                     )
        //                 )
        //             )
        //     );
        // Assertions.assertEquals(json.point(".ListMap[2].id3[0][0].id33.id333").has(), true);

        // json
        //     .point(".ListMap[2].id3[0]")
        //     .add(JSON.sPut("id11", "1").put("id22", "2").put("id33", JSON.sPut("id333", "value1")));
        // Assertions.assertEquals(json.point(".ListMap[2].id3[0][1].id33.id333").has(), true);

        // json
        //     .point(".ListMap[2].id3")
        //     .add(
        //         JSON.sAdd(JSON.sPut("id11", "1").put("id22", "2").put("id33", JSON.sPut("id333", "value1")))
        //     );
        // Assertions.assertEquals(json.point(".ListMap[2].id3[1][0].id33.id333").has(), true);

        // jsonArray
        //     .point(".[0].ListMap")
        //     .add(
        //         JSON
        //             .sPut("id1", "1")
        //             .put("id2", "2")
        //             .put(
        //                 "id3",
        //                 JSON.sAdd(
        //                     JSON.sAdd(
        //                         JSON
        //                             .sPut("id11", "1")
        //                             .put("id22", "2")
        //                             .put("id33", JSON.sPut("id333", "value1"))
        //                     )
        //                 )
        //             )
        //     );
        // Assertions.assertEquals(jsonArray.point(".[0].ListMap[2].id3[0][0].id33.id333").has(), true);    

        // jsonArray.point(".").add(json.deepCopy().put("int", 3));
        // Assertions.assertEquals(jsonArray.point(".[2].int").has(), true);

        // Integer a = Integer.valueOf(1);
        // HashMap<Object, Object> map = new HashMap<>();
        // // map.put("key", "value");
        // map.put(JSON.parse(a).getValueNode().deepCopy() , 1);
        Assertions.assertEquals(json.point(".map.a").get().asString(), "1");
        Assertions.assertEquals(json.point(".List[0]").get().asString(), "1");
        json.point(".map.a").get().getValueNode()
        JsonParser.
        Assertions.assertEquals(IntNode.valueOf(1).traverse().getTokenLocation()== IntNode.valueOf(1).traverse().getCurrentToken() , true);
    }
}
