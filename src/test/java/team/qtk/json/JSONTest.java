/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package team.qtk.json;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.json.JsonReadFeature;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import team.qtk.json.point.Point.DefaultValueMap;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class JSONTest {

    @Test
    void objectPut() {
        String json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            )
            .toString();
        System.out.println(json);
        assertEquals(
            json,
            "{\"int\":1,\"string\":\"2\",\"float\":2.5,\"double\":2.5,\"BigDecimal\":1,\"boolean\":false,\"null\":null,\"map\":{\"a\":\"1\",\"b\":\"2\"},\"JSON.Map\":{\"m1\":\"1\",\"m2\":\"2\"},\"List\":[\"1\",\"2\"],\"JSON.List\":[1,2,4,5,[6,7]]}"
        );
    }

    @Test
    void arrayAdd() {
        String json = JSON
            .sAdd(
                1,
                3,
                new ArrayList<Integer>() {
                    {
                        add(6);
                        add(7);
                    }
                }
            )
            .add(2, 4)
            .add(5)
            .add(
                new ArrayList<Integer>() {
                    {
                        add(6);
                        add(7);
                    }
                }
            )
            .add((Object) null)
            .add(
                JSON
                    .sPut("array.map.int", 1)
                    .put(
                        "array.map.map",
                        new HashMap<String, String>() {
                            {
                                put("m1", "1");
                            }
                        }
                    )
                    .put(
                        "array.map.array",
                        new ArrayList<String>() {
                            {
                                add("1");
                            }
                        }
                    )
            )
            .concat(
                new ArrayList<String>() {
                    {
                        add("concat.1");
                    }
                }
            )
            .toString();
        System.out.println(json);
    }

    @Test
    void pointGet() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        // System.out.println(json.point(".ListMap[0].id3").get().asString());
        assertEquals(json.point(".int").get().asInt(), 1);
        assertEquals(json.point(".string").get().asString(), "2");
        assertEquals(json.point(".float").get().asFloat(), 2.5f);
        assertEquals(json.point(".double").get().asDouble(), 2.5d);
        assertEquals(json.point(".BigDecimal").get().asBigDecimal(), BigDecimal.valueOf(1));
        assertEquals(json.point(".boolean").get().asBoolean(), false);

        assertEquals(json.point(".boolean").get().asObject(), false);
        assertEquals(json.point(".int").get().asObject(), 1);
        assertEquals(json.point(".string").get().asObject(), "2");
        assertEquals(json.point(".float").get().asObject(), 2.5f);
        assertEquals(json.point(".double").get().asObject(), 2.5d);

        Assertions.assertNull(json.point(".null").get().asNull());

        assertEquals(
            json.point(".map").get().asMap().hashCode(),
            new HashMap<String, String>() {
                {
                    put("a", "1");
                    put("b", "2");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".\"JSON.Map\"").get().asMap().hashCode(),
            new HashMap<String, String>() {
                {
                    put("m1", "1");
                    put("m2", "2");
                }
            }
                .hashCode()
        );
        assertEquals(
            json.point(".List").get().asList(String.class).hashCode(),
            new ArrayList<String>() {
                {
                    add("1");
                    add("2");
                }
            }
                .hashCode()
        );

        assertEquals(json.point(".map.a").get().asString(), "1");
        assertEquals(json.point(".List[0]").get().asString(), "1");
        assertEquals(json.point(".ListMap[0].id1").get().asString(), "1");
        assertEquals(
            json.point(".ListMap[0].id3[0]").get().asList().hashCode(),
            new ArrayList<>() {
                {
                    add(
                        new HashMap<>() {
                            {
                                put("id11", "1");
                                put("id22", "2");
                                put(
                                    "id33",
                                    new HashMap<String, String>() {
                                        {
                                            put("id333", "value1");
                                        }
                                    }
                                );
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        assertEquals(
            json.point(".ListMap[0].id3[0][0]").get().asMap().hashCode(),
            new HashMap<>() {
                {
                    put("id11", "1");
                    put("id22", "2");
                    put(
                        "id33",
                        new HashMap<String, String>() {
                            {
                                put("id333", "value1");
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        assertEquals(json.point(".ListMap[0].id1").get().asString(), "1");
        assertEquals(
            json.point(".ListMap[*].id1").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("1");
                    add("11");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[*].id3[*][*].id11").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("1");
                    add("11");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[1].id3[*][*].id11").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("11");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[*].id3[*][*].id33.id333").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("value1");
                    add("value2");
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.point(".[0].ListMap[*].id3[*][*].id33.id333").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("value1");
                    add("value2");
                }
            }
                .hashCode()
        );

        try {
            json.point(".ListMap[0].id3[0][0].id331.id333").get().asString();
            fail();
        } catch (NullPointerException error) {
            assertTrue(true);
        } catch (Exception error) {
            fail();
        }
    }

    @Test
    void pointHas() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        // System.out.println(json.point(".ListMap[0].id3").get().asString());
        assertTrue(json.point(".int").has());
        assertTrue(json.point(".string").has());
        assertTrue(json.point(".float").has());
        assertTrue(json.point(".double").has());
        assertTrue(json.point(".BigDecimal").has());
        assertTrue(json.point(".boolean").has());
        assertTrue(json.point(".null").has());

        assertTrue(json.point(".map").has());

        assertTrue(json.point(".\"JSON.Map\"").has());

        assertTrue(json.point(".List").has());

        assertTrue(json.point(".map.a").has());
        assertTrue(json.point(".List[0]").has());
        assertTrue(json.point(".ListMap[0].id1").has());
        assertTrue(json.point(".ListMap[0].id3[0]").has());
        assertTrue(json.point(".ListMap[0].id3[0][0]").has());
        assertTrue(json.point(".ListMap[0].id1").has());
        assertTrue(json.point(".ListMap[*].id1").has());

        assertFalse(json.point(".ListMap[*].id3[*][*].id11-null").has());

        assertTrue(json.point(".ListMap[*].id3[*][*].id11-null", 1).has());

        assertTrue(json.point(".ListMap[1].id3[*][*].id11").has());

        assertTrue(json.point(".ListMap[*].id3[*][*].id33.id333").has());

        assertTrue(jsonArray.point(".[0].ListMap[*].id3[*][*].id33.id333").has());

        assertFalse(json.point(".ListMap[0].id3[0][0].id331.id333").has());

        assertFalse(json.point("?.ListMap[3].id3[0][0].id331.id333").has());
        assertFalse(json.point("?.ListMap[3].id3[0][0].id331.id333").has(false));

        assertFalse(json.point(".ListMap[0]?.id33[0][0].id331.id333").has());
        assertFalse(json.point(".ListMap[0]?.id33[0][0].id331.id333").has(false));

        assertFalse(json.point(".ListMap[0].id3[0][0]?.id331.id333").has());
        assertFalse(json.point(".ListMap[0].id3[0][0]?.id331.id333").has(false));

        assertFalse(json.point("?.ListMap1[*].id33[0][0].id331.id333").has());
        assertFalse(json.point("?.ListMap1[*].id33[0][0].id331.id333").has(false));

        assertFalse(json.point(".ListMap[0]?.id3[10][0].id33.id333").has());
        assertFalse(json.point(".ListMap[0]?.id3[10][0].id33.id333").has(false));

        assertFalse(json.point(".ListMap[*]?.id3[10][0].id33.id333").has());
        assertFalse(json.point(".ListMap[*]?.id3[10][0].id33.id333").has(false));

        assertFalse(jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").has());

        assertFalse(jsonArray.point("?.[3].ListMap[*].id3[*][*].id33.id333").has());
        assertFalse(jsonArray.point("?.[3].ListMap[*].id3[*][*].id33.id333").has(false));
    }

    @Test
    void pointDelete() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json.deepCopy().put("int", 2));
        System.out.println(json);

        json.point(".int").delete();
        assertFalse(json.point(".int").has());

        json.point(".\"JSON.Map\"").delete();
        assertFalse(json.point(".\"JSON.Map\"").has());

        json.point(".map.a").delete();
        assertFalse(json.point(".map.a").has());

        json.point(".ListMap[0].id3[0][0].id33.id333").delete();
        assertFalse(json.point(".ListMap[0].id3[0][0].id33.id333").has());
        assertTrue(json.point(".ListMap[1].id3[0][0].id33.id333").has());

        json.point(".ListMap[1].id3[*][*].id11").delete();
        Assertions.assertFalse(json.point(".ListMap[1].id3[*][*].id11").has());
        Assertions.assertFalse(json.point(".ListMap[1].id3[0][0].id11").has());
        assertTrue(json.point(".ListMap[1].id3[*][*].id22").has());
        assertTrue(json.point(".ListMap[1].id3[0][0].id22").has());
        assertTrue(json.point(".ListMap[0].id3[*][*].id11").has());

        json.point(".ListMap[*].id3[*][*].id11").delete();
        Assertions.assertFalse(json.point(".ListMap[*].id3[*][*].id11").has());
        Assertions.assertFalse(json.point(".ListMap[*].id3[0][0].id11").has());
        assertTrue(json.point(".ListMap[*].id3[*][*].id22").has());
        assertTrue(json.point(".ListMap[*].id3[0][0].id22").has());
        Assertions.assertFalse(json.point(".ListMap[*].id3[*][*].id11").has());

        json.point(".ListMap[0].id3[0][0]").delete();
        Assertions.assertFalse(json.point(".ListMap[0].id3[0][0]").has());
        assertTrue(json.point(".ListMap[1].id3[0][0]").has());
        assertTrue(json.point(".ListMap[1].id3[0]").has());

        json.point(".ListMap[0].id3[0]").delete();
        Assertions.assertFalse(json.point(".ListMap[0].id3[0]").has());
        assertTrue(json.point(".ListMap[0].id3").has());
        assertTrue(json.point(".ListMap[1].id3[0]").has());

        json.point(".ListMap[0].id3").delete();
        Assertions.assertFalse(json.point(".ListMap[0].id3").has());
        assertTrue(json.point(".ListMap[1].id3").has());

        json.point(".ListMap[*].id3").delete();
        assertFalse(json.point(".ListMap[0].id3").has());
        assertFalse(json.point(".ListMap[1].id3").has());

        json.point(".ListMap").delete();
        assertFalse(json.point(".ListMap[0].id3").has());
        assertFalse(json.point(".ListMap[1].id3").has());
        assertFalse(json.point(".ListMap").has());

        json.point(".ListMap[3]?.id3[0][0].id331.id333").delete();
        assertFalse(json.point(".ListMap[0].id33[0][0]?.id331.id333").has());

        json.point(".ListMap[0].id3[0][0]?.id331.id333").delete();
        assertFalse(json.point(".ListMap[0].id3[0][0]?.id331.id333").has());

        json.point("?.ListMap1[*].id33[0][0].id331.id333").delete();
        assertFalse(json.point("?.ListMap1[*].id33[0][0].id331.id333").has(false));

        jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").delete();
        assertFalse(jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").has());

        jsonArray.point("?.[3].ListMap[*].id3[*][*].id33.id333").delete();
        assertFalse(jsonArray.point("?.[3].ListMap[*].id3[*][*].id33.id333").has());

        jsonArray.point(".[0].ListMap[*].id3[*][*].id33.id333").delete();
        assertFalse(jsonArray.point(".[0].ListMap[*].id3[*][*].id33.id333").has());
        assertTrue(jsonArray.point(".[1].ListMap[*].id3[*][*].id33.id333").has());

        jsonArray.point(".[0]").delete();
        assertTrue(jsonArray.point(".[0].int").has());
        assertEquals(jsonArray.point(".[0].int").get().asInt(), 2);
        assertFalse(jsonArray.point(".[1].int").has());
    }

    @Test
    void pointPick() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json.deepCopy().put("int", 2));

//        System.out.println(json.point().pick("int", "string", "map").point(".map").pick("a").toString());
        assertEquals(
            json.deepCopy().point().retain("int", "string", "map").point(".map").retain("a").toString(),
            json.pick(".int", ".string", ".map.a").toString()
        );
        assertTrue(json.pick(".int").point(".int").has());
        assertTrue(json.pick(".\"JSON.Map\"").point(".\"JSON.Map\"").has());
        assertTrue(json.pick(".map.a").point(".map.a").has());

        assertTrue(jsonArray.point(".[1].ListMap[*].id3[*][*]").retain("id33").point(".[1].ListMap[*].id3[*][*].id33.id333").has());
        assertFalse(jsonArray.point(".[1].ListMap[*].id3[*][*]").retain("id33").point(".[1].ListMap[*].id3[*][*].id22").has());
        assertTrue(jsonArray.point(".[1].ListMap[*].id3[*][*]").retain("id33").point(".[0].ListMap[*].id3[*][*].id33.id333").has());
        assertTrue(jsonArray.point(".[1].ListMap[*].id3[*][*]").retain("id33").point(".[0].ListMap[*].id3[*][*].id22").has());

        assertTrue(jsonArray.pick(".int").point(".[0].int").has());
        assertTrue(jsonArray.pick(".int").point(".[1].int").has());
        assertFalse(jsonArray.pick(".int").point(".[0].string").has());
        assertFalse(jsonArray.pick(".int").point(".[1].string").has());
    }

    @Test
    void pointExclude() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json.deepCopy().put("int", 2));

//        System.out.println(json.point().pick("int", "string", "map").point(".map").pick("a").toString());
        assertEquals(
            json.deepCopy().point().exclude("int", "string").point(".map").exclude("a").toString(),
            json.exclude(".int", ".string", ".map.a").toString()
        );
        assertFalse(json.exclude(".int").point(".int").has());
        assertFalse(json.exclude(".\"JSON.Map\"").point(".\"JSON.Map\"").has());
        assertFalse(json.exclude(".map.a").point(".map.a").has());

        assertFalse(jsonArray.point(".[1].ListMap[*].id3[*][*]").exclude("id33").point(".[1].ListMap[*].id3[*][*].id33.id333").has());
        assertTrue(jsonArray.point(".[1].ListMap[*].id3[*][*]").exclude("id33").point(".[1].ListMap[*].id3[*][*].id22").has());
        assertTrue(jsonArray.point(".[1].ListMap[*].id3[*][*]").exclude("id33").point(".[0].ListMap[*].id3[*][*].id33.id333").has());
        assertTrue(jsonArray.point(".[1].ListMap[*].id3[*][*]").exclude("id33").point(".[0].ListMap[*].id3[*][*].id22").has());

        assertFalse(jsonArray.exclude(".int").point(".[0].int").has());
        assertFalse(jsonArray.exclude(".int").point(".[1].int").has());
        assertTrue(jsonArray.exclude(".int").point(".[0].string").has());
        assertTrue(jsonArray.exclude(".int").point(".[1].string").has());
    }

    @Test
    void pointPut() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json.deepCopy().put("int", 2));
        System.out.println(json);

        json.point(".").put("ex_int", 1);
        assertEquals(json.point(".ex_int").get().asInt(), 1);

        json.point(".").put("ext.int", 1);
        assertEquals(json.point(".\"ext.int\"").get().asInt(), 1);

        json.point(".map").put("c", 1);
        assertEquals(json.point(".map.c").get().asInt(), 1);

        json.point(".ListMap[0].id3[0][0].id33").put("id334", 1);
        assertTrue(json.point(".ListMap[0].id3[0][0].id33.id334").has());
        assertFalse(json.point(".ListMap[1].id3[0][0].id33.id334").has());

        json.point(".ListMap[1].id3[*][*]").put("ext_id", 1);
        json.point(".ListMap[1]").point(".id3[*][*]").put("ext_id", 1);
        assertTrue(json.point(".ListMap[1].id3[0][0].ext_id").has());
        assertFalse(json.point(".ListMap[0].id3[0][0].ext_id").has());

        json.point(".ListMap[*].id3[*][*]").put("ext_id2", 1);
        assertTrue(json.point(".ListMap[0].id3[0][0].ext_id2").has());
        assertTrue(json.point(".ListMap[1].id3[0][0].ext_id2").has());

        jsonArray.point(".[0].ListMap[*].id3[*][*].id33").put("ext_id3", 1);
        assertTrue(jsonArray.point(".[0].ListMap[0].id3[0][0].id33.ext_id3").has());
        assertTrue(jsonArray.point(".[0].ListMap[1].id3[0][0].id33.ext_id3").has());
        assertFalse(jsonArray.point(".[1].ListMap[0].id3[0][0].id33.ext_id3").has());
        assertFalse(jsonArray.point(".[1].ListMap[1].id3[0][0].id33.ext_id3").has());

        jsonArray.point(".[*].ListMap[*].id3[*][*].id33").put("ext_id3", 1);
        assertTrue(jsonArray.point(".[0].ListMap[0].id3[0][0].id33.ext_id3").has());
        assertTrue(jsonArray.point(".[0].ListMap[1].id3[0][0].id33.ext_id3").has());
        assertTrue(jsonArray.point(".[1].ListMap[0].id3[0][0].id33.ext_id3").has());
        assertTrue(jsonArray.point(".[1].ListMap[1].id3[0][0].id33.ext_id3").has());

        jsonArray.point(".[0]").put("ext_int", 1);
        assertTrue(jsonArray.point(".[0].ext_int").has());
        assertFalse(jsonArray.point(".[1].ext_int").has());
    }

    @Test
    void pointPutFullKey() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json.deepCopy().put("int", 2));
        System.out.println(json);

        json.point(".ex_int").put(1);
        assertEquals(json.point(".ex_int").get().asInt(), 1);

        json.point(".\"ext.int\"").put(1);
        assertEquals(json.point(".\"ext.int\"").get().asInt(), 1);

        json.point(".map.c").put(1);
        assertEquals(json.point(".map.c").get().asInt(), 1);

        json.point(".ListMap[0].id3[0][0].id33.id334").put(1);
        assertTrue(json.point(".ListMap[0].id3[0][0].id33.id334").has());
        assertFalse(json.point(".ListMap[1].id3[0][0].id33.id334").has());

        json.point(".ListMap[1].id3[*][*].ext_id").put(1);
        json.point(".ListMap[1]").point(".id3[*][*].ext_id").put(1);
        assertTrue(json.point(".ListMap[1].id3[0][0].ext_id").has());
        assertFalse(json.point(".ListMap[0].id3[0][0].ext_id").has());

        json.point(".ListMap[*].id3[*][*].ext_id2").put(1);
        assertTrue(json.point(".ListMap[0].id3[0][0].ext_id2").has());
        assertTrue(json.point(".ListMap[1].id3[0][0].ext_id2").has());

        jsonArray.point(".[0].ListMap[*].id3[*][*].id33.ext_id3").put(1);
        assertTrue(jsonArray.point(".[0].ListMap[0].id3[0][0].id33.ext_id3").has());
        assertTrue(jsonArray.point(".[0].ListMap[1].id3[0][0].id33.ext_id3").has());
        assertFalse(jsonArray.point(".[1].ListMap[0].id3[0][0].id33.ext_id3").has());
        assertFalse(jsonArray.point(".[1].ListMap[1].id3[0][0].id33.ext_id3").has());

        jsonArray.point(".[*].ListMap[*].id3[*][*].id33.ext_id3").put(1);
        assertTrue(jsonArray.point(".[0].ListMap[0].id3[0][0].id33.ext_id3").has());
        assertTrue(jsonArray.point(".[0].ListMap[1].id3[0][0].id33.ext_id3").has());
        assertTrue(jsonArray.point(".[1].ListMap[0].id3[0][0].id33.ext_id3").has());
        assertTrue(jsonArray.point(".[1].ListMap[1].id3[0][0].id33.ext_id3").has());

        jsonArray.point(".[0].ext_int").put(1);
        assertTrue(jsonArray.point(".[0].ext_int").has());
        assertFalse(jsonArray.point(".[1].ext_int").has());
    }

    @Test
    void pointAdd() {
        JSON json = JSON
            .sPut("int", Boolean.valueOf("false"))
            .put("string", "2")
            .put("int2", Boolean.valueOf("false"))
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json.deepCopy().put("int", 2));
        System.out.println(json);

        json
            .point(".ListMap")
            .add(
                JSON
                    .sPut("id1", "1")
                    .put("id2", "2")
                    .put(
                        "id3",
                        JSON.sAdd(
                            JSON.sAdd(
                                JSON
                                    .sPut("id11", "1")
                                    .put("id22", "2")
                                    .put("id33", JSON.sPut("id333", "value1"))
                            )
                        )
                    )
            );
        assertTrue(json.point(".ListMap[2].id3[0][0].id33.id333").has());

        json
            .point(".ListMap[2].id3[0]")
            .add(JSON.sPut("id11", "1").put("id22", "2").put("id33", JSON.sPut("id333", "value1")));
        assertTrue(json.point(".ListMap[2].id3[0][1].id33.id333").has());

        json
            .point(".ListMap[2].id3")
            .add(
                JSON.sAdd(JSON.sPut("id11", "1").put("id22", "2").put("id33", JSON.sPut("id333", "value1")))
            );
        assertTrue(json.point(".ListMap[2].id3[1][0].id33.id333").has());

        json
            .point(".ListMap[*].id3")
            .add(
                JSON.sAdd(JSON.sPut("id11", "1").put("id22", "2").put("id33", JSON.sPut("id333", "value1")))
            );
        assertTrue(json.point(".ListMap[0].id3[1][0].id33.id333").has() &&
            json.point(".ListMap[1].id3[1][0].id33.id333").has() &&
            json.point(".ListMap[1].id3[1][0].id33.id333").has());

        jsonArray
            .point(".[0].ListMap")
            .add(
                JSON
                    .sPut("id1", "1")
                    .put("id2", "2")
                    .put(
                        "id3",
                        JSON.sAdd(
                            JSON.sAdd(
                                JSON
                                    .sPut("id11", "1")
                                    .put("id22", "2")
                                    .put("id33", JSON.sPut("id333", "value1"))
                            )
                        )
                    )
            );
        assertTrue(jsonArray.point(".[0].ListMap[2].id3[0][0].id33.id333").has());

        jsonArray.point(".").add(json.deepCopy().put("int", 3));
        assertTrue(jsonArray.point(".[2].int").has());
    }

    @Test
    void pointNullish() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        // System.out.println(json.point(".ListMap[0].id3").get().asString());
        assertNull(json.point("?.int-null").get().asInt());
        assertNull(json.point("?.string-null").get().asString());
        assertNull(json.point("?.float-null").get().asFloat());
        assertNull(json.point("?.double-null").get().asDouble());
        assertNull(json.point("?.BigDecimal-null").get().asBigDecimal());
        assertNull(json.point("?.boolean-null").get().asBoolean());
        assertNull(json.point("?.null-null").get().asNull());

        assertNull(json.point("?.map-null").get().asMap());

        assertNull(json.point("?.\"JSON.Map-null\"").get().asMap());
        assertNull(json.point("?.List-null").get().asList(String.class));

        assertNull(json.point(".map?.a-null").get().asString());
        assertNull(json.point("?.List[3]").get().asString());
        assertNull(json.point(".ListMap[0]?.id0").get().asString());
        assertNull(json.point(".ListMap[0]?.id3[1]").get().asList());
        assertNull(json.point(".ListMap[0]?.id3[0][1]").get().asMap());
        assertEquals(
            json.point(".ListMap[*]?.id0").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point("?.ListMap-null[*]?.id0").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[*].id3[*][*]?.id111").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[*]?.id4[*][*]?.id111").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[1].id3[*][*]?.id111").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[*].id3[*][*].id33?.id3333").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.point(".[0].ListMap[*].id3[*][*].id33?.id3333").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.point("?.[2].ListMap[*].id3[*][*].id33.id333").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        try {
            json.point(".ListMap[0].id3[0][0].id331.id333").get().asString();
            fail();
        } catch (NullPointerException error) {
            assertTrue(true);
        } catch (Exception error) {
            fail();
        }

        assertNull(json.point("?.ListMap[3].id3[0][0].id331.id333").get().asString());

        assertNull(json.point(".ListMap[0]?.id33[0][0].id331.id333").get().asString());

        assertNull(json.point(".ListMap[0].id3[0][0]?.id331.id333").get().asString());

        assertEquals(
            json.point("?.ListMap1[*].id33[0][0].id331.id333").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertNull(json.point(".ListMap[0]?.id3[10][0].id33.id333").get().asString());

        assertEquals(
            json.point(".ListMap[*]?.id3[10][0].id33.id333").get().asList().hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        try {
            jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").get().asList();
            fail();
        } catch (NullPointerException error) {
            assertTrue(true);
        } catch (Exception error) {
            fail();
        }

        assertEquals(
            jsonArray.point("?.[3].ListMap[*].id3[*][*].id33.id333").get().asList().hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );
    }

    @Test
    void pointNullable() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        // System.out.println(json.point(".ListMap[0].id3").get(true).asString());
        Assertions.assertNull(json.point(".int-null").get(true).asInt());
        Assertions.assertNull(json.point(".string-null").get(true).asString());
        Assertions.assertNull(json.point(".float-null").get(true).asFloat());
        Assertions.assertNull(json.point(".double-null").get(true).asDouble());
        Assertions.assertNull(json.point(".BigDecimal-null").get(true).asBigDecimal());
        Assertions.assertNull(json.point(".boolean-null").get(true).asBoolean());
        Assertions.assertNull(json.point(".null-null").get(true).asNull());

        Assertions.assertNull(json.point(".map-null").get(true).asMap());

        Assertions.assertNull(json.point(".\"JSON.Map-null\"").get(true).asMap());
        Assertions.assertNull(json.point(".List-null").get(true).asList(String.class));

        Assertions.assertNull(json.point(".map.a-null").get(true).asString());
        Assertions.assertNull(json.point(".List[3]").get(true).asString());
        Assertions.assertNull(json.point(".ListMap[0].id0").get(true).asString());
        Assertions.assertNull(json.point(".ListMap[0].id3[1]").get(true).asList());
        Assertions.assertNull(json.point(".ListMap[0].id3[0][1]").get(true).asMap());
        assertEquals(
            json.point(".ListMap[*].id0").get(true).asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap-null[*].id0").get(true).asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[*].id3[*][*].id111").get(true).asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[*].id4[*][*].id111").get(true).asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[1].id3[*][*].id111").get(true).asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[*].id3[*][*].id33.id3333").get(true).asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray
                .point(".[0].ListMap[*].id3[*][*].id33.id3333")
                .get(true)
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.point(".[2].ListMap[*].id3[*][*].id33.id333").get(true).asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertNull(json.point(".ListMap[0].id3[0][0].id331.id333").get(true).asString());

        assertNull(json.point(".ListMap[3].id3[0][0].id331.id333").get(true).asString());

        assertNull(json.point(".ListMap[0].id33[0][0].id331.id333").get(true).asString());

        assertNull(json.point(".ListMap[0].id3[0][0].id331.id333").get(true).asString());

        assertEquals(
            json.point(".ListMap1[*].id33[0][0].id331.id333").get(true).asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertNull(json.point(".ListMap[0].id3[10][0].id33.id333").get(true).asString());

        assertEquals(
            json.point(".ListMap[*].id3[10][0].id33.id333").get(true).asList().hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").get(true).asList().hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").get(true).asList().hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );
    }

    void assertError(Runnable exec, String errorMessage) {
        try {
            exec.run();
        } catch (Exception error) {
            assertEquals(errorMessage, error.getMessage());
        }
    }

    @Test
    void pointMissingPath() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        assertError(() -> json.point(".int-null").get().asInt(), ".int-null is missing");
        assertError(() -> json.point(".string-null").get().asString(), ".string-null is missing");
        assertError(() -> json.point(".float-null").get().asFloat(), ".float-null is missing");
        assertError(() -> json.point(".double-null").get().asDouble(), ".double-null is missing");
        assertError(() -> json.point(".BigDecimal-null").get().asBigDecimal(), ".BigDecimal-null is missing");
        assertError(() -> json.point(".boolean-null").get().asBoolean(), ".boolean-null is missing");
        assertError(() -> json.point(".null-null").get().asNull(), ".null-null is missing");

        assertError(() -> json.point(".map-null").get().asMap(), ".map-null is missing");

        assertError(() -> json.point(".\"JSON.Map-null\"").get().asMap(), ".JSON.Map-null is missing");
        assertError(() -> json.point(".List-null").get().asList(String.class), ".List-null is missing");
        assertError(() -> json.point(".map.a-null").get().asString(), ".map.a-null is missing");
        assertError(() -> json.point(".List[3]").get().asString(), ".List[3] is missing");
        assertError(() -> json.point(".ListMap[0].id0").get().asString(), ".ListMap[0].id0 is missing");
        assertError(() -> json.point(".ListMap[0].id3[1]").get().asList(), ".ListMap[0].id3[1] is missing");
        assertError(
            () -> json.point(".ListMap[0].id3[0][1]").get().asMap(),
            ".ListMap[0].id3[0][1] is missing"
        );
        assertError(
            () -> json.point(".ListMap[*].id0").get().asList(String.class),
            ".ListMap[0].id0,.ListMap[1].id0 is missing"
        );

        assertError(
            () -> json.point(".ListMap-null[*].id0").get().asList(String.class),
            ".ListMap-null is missing"
        );

        assertError(
            () -> json.point(".ListMap[*].id3[*][*].id111").get().asList(String.class),
            ".ListMap[0].id3[0][0].id111,.ListMap[1].id3[0][0].id111 is missing"
        );

        assertError(
            () -> json.point(".ListMap[*].id4[*][*].id111").get().asList(String.class),
            ".ListMap[0].id4,.ListMap[1].id4 is missing"
        );

        assertError(
            () -> json.point(".ListMap[1].id3[*][*].id111").get().asList(String.class),
            ".ListMap[1].id3[0][0].id111 is missing"
        );

        assertError(
            () -> json.point(".ListMap[*].id3[*][*].id33.id3333").get().asList(String.class),
            ".ListMap[0].id3[0][0].id33.id3333,.ListMap[1].id3[0][0].id33.id3333 is missing"
        );

        assertError(
            () -> jsonArray.point(".[0].ListMap[*].id3[*][*].id33.id3333").get().asList(String.class),
            ".[0].ListMap[0].id3[0][0].id33.id3333,.[0].ListMap[1].id3[0][0].id33.id3333 is missing"
        );

        assertError(
            () -> jsonArray.point(".[2].ListMap[*].id3[*][*].id33.id333").get().asList(String.class),
            ".[2] is missing"
        );

        assertError(
            () -> json.point(".ListMap[0].id3[0][0].id331.id333").get().asString(),
            ".ListMap[0].id3[0][0].id331 is missing"
        );

        assertError(
            () -> json.point(".ListMap[3].id3[0][0].id331.id333").get().asString(),
            ".ListMap[3] is missing"
        );

        assertError(
            () -> json.point(".ListMap[0].id33[0][0].id331.id333").get().asString(),
            ".ListMap[0].id33 is missing"
        );

        assertError(
            () -> json.point(".ListMap[0].id3[0][0].id331.id333").get().asString(),
            ".ListMap[0].id3[0][0].id331 is missing"
        );

        assertError(
            () -> json.point(".ListMap1[*].id33[0][0].id331.id333").get().asList(String.class),
            ".ListMap1 is missing"
        );

        assertError(
            () -> json.point(".ListMap[0].id3[10][0].id33.id333").get().asString(),
            ".ListMap[0].id3[10] is missing"
        );

        assertError(
            () -> json.point(".ListMap[*].id3[10][0].id33.id333").get().asList(),
            ".ListMap[0].id3[10],.ListMap[1].id3[10] is missing"
        );

        assertError(
            () -> jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").get().asList(),
            ".[3] is missing"
        );

        assertError(
            () -> jsonArray.point(".[3].ListMap[*].id3[*][*].id33.id333").get().asList(),
            ".[3] is missing"
        );
    }

    @Test
    void pointDefaultValue() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1")),
                                    JSON
                                        .sPut("id11-null", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        assertEquals(json.point(".int-null", 1).get().asInt(), 1);
        assertEquals(json.point(".string-null", "2").get().asString(), "2");
        assertEquals(json.point(".float-null", 2.5f).get().asFloat(), 2.5f);
        assertEquals(json.point(".double-null", 2.5d).get().asDouble(), 2.5d);
        assertEquals(
            json.point(".BigDecimal-null", BigDecimal.valueOf(1)).get().asBigDecimal(),
            BigDecimal.valueOf(1)
        );
        assertEquals(json.point(".boolean-null", false).get().asBoolean(), false);
        assertNull(json.point(".null-null", null).get().asNull());

        assertEquals(
            json
                .point(
                    ".map-null",
                    new HashMap<String, String>() {
                        {
                            put("a", "1");
                            put("b", "2");
                        }
                    }
                )
                .get()
                .asMap()
                .hashCode(),
            new HashMap<String, String>() {
                {
                    put("a", "1");
                    put("b", "2");
                }
            }
                .hashCode()
        );

        assertEquals(
            json
                .point(
                    ".\"JSON.Map-null\"",
                    new HashMap<String, String>() {
                        {
                            put("m1", "1");
                            put("m2", "2");
                        }
                    }
                )
                .get()
                .asMap()
                .hashCode(),
            new HashMap<String, String>() {
                {
                    put("m1", "1");
                    put("m2", "2");
                }
            }
                .hashCode()
        );
        assertEquals(
            json
                .point(
                    ".List-null",
                    new ArrayList<String>() {
                        {
                            add("1");
                            add("2");
                        }
                    }
                )
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<String>() {
                {
                    add("1");
                    add("2");
                }
            }
                .hashCode()
        );

        assertEquals(json.point(".map.a-null", "1").get().asString(), "1");
        assertEquals(json.point(".List[10]", "1").get().asString(), "1");
        assertEquals(json.point(".ListMap[0].id1-null", "1").get().asString(), "1");
        assertEquals(
            json
                .point(
                    ".ListMap[0].id3[10]",
                    new ArrayList<>() {
                        {
                            add(
                                new HashMap<>() {
                                    {
                                        put("id11", "1");
                                        put("id22", "2");
                                        put(
                                            "id33",
                                            new HashMap<String, String>() {
                                                {
                                                    put("id333", "value1");
                                                }
                                            }
                                        );
                                    }
                                }
                            );
                        }
                    }
                )
                .get()
                .asList()
                .hashCode(),
            new ArrayList<>() {
                {
                    add(
                        new HashMap<>() {
                            {
                                put("id11", "1");
                                put("id22", "2");
                                put(
                                    "id33",
                                    new HashMap<String, String>() {
                                        {
                                            put("id333", "value1");
                                        }
                                    }
                                );
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        assertEquals(
            json
                .point(
                    ".ListMap[0].id3[0][10]",
                    new HashMap<>() {
                        {
                            put("id11", "1");
                            put("id22", "2");
                            put(
                                "id33",
                                new HashMap<String, String>() {
                                    {
                                        put("id333", "value1");
                                    }
                                }
                            );
                        }
                    }
                )
                .get()
                .asMap()
                .hashCode(),
            new HashMap<>() {
                {
                    put("id11", "1");
                    put("id22", "2");
                    put(
                        "id33",
                        new HashMap<String, String>() {
                            {
                                put("id333", "value1");
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        assertEquals(json.point(".ListMap[0].id1-null", "1").get().asString(), "1");
        assertEquals(
            json.point(".ListMap[*].id1-null", "fix").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[*].id3[*][*].id11-null", "fix").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("1");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[1].id3[*][*].id11-null", "fix").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[*].id3[*][*].id33.id333-null", "fix").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray
                .point(".[0].ListMap[*].id3[*][*].id33.id333-null", "fix")
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray
                .point(".[0].ListMap[*].id3[*][*].id33.id333-null", () -> "fix")
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            json
                .point(".ListMap[0].id3[0][0].id331.id333-null")
                .defaultValue(
                    new DefaultValueMap() {
                        {
                            put(
                                ".ListMap[0].id3[0][0].id331",
                                new HashMap<String, Object>() {
                                }
                            );
                            put(".ListMap[0].id3[0][0].id331.id333-null", "fix");
                        }
                    }
                )
                .get()
                .asString(),
            "fix"
        );
    }

    @Test
    void pointDefaultValueToUpdate() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1")),
                                    JSON
                                        .sPut("id11-null", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json.deepCopy(), json.deepCopy());
        System.out.println(json);

        assertEquals(json.point(".int-null", 1).get().asInt(), 1);
        Assertions.assertFalse(json.point(".int-null").has());
        assertEquals(json.point(".int-null", 1, true).get().asInt(), 1);
        assertTrue(json.point(".int-null").has());

        assertEquals(
            json
                .point(
                    ".map-null",
                    new HashMap<String, String>() {
                        {
                            put("a", "1");
                            put("b", "2");
                        }
                    }
                )
                .get()
                .asMap()
                .hashCode(),
            new HashMap<String, String>() {
                {
                    put("a", "1");
                    put("b", "2");
                }
            }
                .hashCode()
        );
        Assertions.assertFalse(json.point(".map-null").has());
        assertEquals(
            json
                .point(
                    ".map-null",
                    new HashMap<String, String>() {
                        {
                            put("a", "1");
                            put("b", "2");
                        }
                    },
                    true
                )
                .get()
                .asMap()
                .hashCode(),
            new HashMap<String, String>() {
                {
                    put("a", "1");
                    put("b", "2");
                }
            }
                .hashCode()
        );
        assertTrue(json.point(".map-null").has());

        assertEquals(
            json
                .point(
                    ".\"JSON.Map-null\"",
                    new HashMap<String, String>() {
                        {
                            put("m1", "1");
                            put("m2", "2");
                        }
                    }
                )
                .get()
                .asMap()
                .hashCode(),
            new HashMap<String, String>() {
                {
                    put("m1", "1");
                    put("m2", "2");
                }
            }
                .hashCode()
        );
        Assertions.assertFalse(json.point(".\"JSON.Map-null\"").has());
        assertEquals(
            json
                .point(
                    ".\"JSON.Map-null\"",
                    new HashMap<String, String>() {
                        {
                            put("m1", "1");
                            put("m2", "2");
                        }
                    },
                    true
                )
                .get()
                .asMap()
                .hashCode(),
            new HashMap<String, String>() {
                {
                    put("m1", "1");
                    put("m2", "2");
                }
            }
                .hashCode()
        );
        assertTrue(json.point(".\"JSON.Map-null\"").has());

        assertEquals(
            json
                .point(
                    ".List-null",
                    new ArrayList<String>() {
                        {
                            add("1");
                            add("2");
                        }
                    }
                )
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<String>() {
                {
                    add("1");
                    add("2");
                }
            }
                .hashCode()
        );
        Assertions.assertFalse(json.point(".List-null").has());
        assertEquals(
            json
                .point(
                    ".List-null",
                    new ArrayList<String>() {
                        {
                            add("1");
                            add("2");
                        }
                    },
                    true
                )
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<String>() {
                {
                    add("1");
                    add("2");
                }
            }
                .hashCode()
        );
        assertTrue(json.point(".List-null").has());

        assertEquals(json.point(".map.a-null", "1").get().asString(), "1");
        Assertions.assertFalse(json.point(".map.a-null").has());
        assertEquals(json.point(".map.a-null", "1", true).get().asString(), "1");
        assertTrue(json.point(".map.a-null").has());

        assertEquals(json.point(".List[10]", "1").get().asString(), "1");
        Assertions.assertFalse(json.point(".List[10]").has());
        assertEquals(json.point(".List[10]", "1", true).get().asString(), "1");
        assertTrue(json.point(".List[0]").has());

        assertEquals(json.point(".ListMap[0].id1-null", "1").get().asString(), "1");
        Assertions.assertFalse(json.point(".ListMap[0].id1-null").has());
        assertEquals(json.point(".ListMap[0].id1-null", "1", true).get().asString(), "1");
        assertTrue(json.point(".ListMap[0].id1-null").has());

        assertEquals(
            json
                .point(
                    ".ListMap[0].id3[10]",
                    new ArrayList<>() {
                        {
                            add(
                                new HashMap<>() {
                                    {
                                        put("id11", "1");
                                        put("id22", "2");
                                        put(
                                            "id33",
                                            new HashMap<String, String>() {
                                                {
                                                    put("id333", "value1");
                                                }
                                            }
                                        );
                                    }
                                }
                            );
                        }
                    }
                )
                .get()
                .asList()
                .hashCode(),
            new ArrayList<>() {
                {
                    add(
                        new HashMap<>() {
                            {
                                put("id11", "1");
                                put("id22", "2");
                                put(
                                    "id33",
                                    new HashMap<String, String>() {
                                        {
                                            put("id333", "value1");
                                        }
                                    }
                                );
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        Assertions.assertFalse(json.point(".ListMap[0].id3[3]").has());
        assertEquals(
            json
                .point(
                    ".ListMap[0].id3[10]",
                    new ArrayList<>() {
                        {
                            add(
                                new HashMap<>() {
                                    {
                                        put("id11", "1");
                                        put("id22", "2");
                                        put(
                                            "id33",
                                            new HashMap<String, String>() {
                                                {
                                                    put("id333", "value1");
                                                }
                                            }
                                        );
                                    }
                                }
                            );
                        }
                    },
                    true
                )
                .get()
                .asList()
                .hashCode(),
            new ArrayList<>() {
                {
                    add(
                        new HashMap<>() {
                            {
                                put("id11", "1");
                                put("id22", "2");
                                put(
                                    "id33",
                                    new HashMap<String, String>() {
                                        {
                                            put("id333", "value1");
                                        }
                                    }
                                );
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        System.out.println(json.point(".ListMap[0].id3").get().asList());
        assertTrue(json.point(".ListMap[0].id3[1]").has());

        assertEquals(
            json
                .point(
                    ".ListMap[0].id3[0][10]",
                    new HashMap<>() {
                        {
                            put("id11", "1");
                            put("id22", "2");
                            put(
                                "id33",
                                new HashMap<String, String>() {
                                    {
                                        put("id333", "value1");
                                    }
                                }
                            );
                        }
                    }
                )
                .get()
                .asMap()
                .hashCode(),
            new HashMap<>() {
                {
                    put("id11", "1");
                    put("id22", "2");
                    put(
                        "id33",
                        new HashMap<String, String>() {
                            {
                                put("id333", "value1");
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        Assertions.assertFalse(json.point(".ListMap[0].id3[0][2]").has());
        assertEquals(
            json
                .point(
                    ".ListMap[0].id3[0][10]",
                    new HashMap<>() {
                        {
                            put("id11", "1");
                            put("id22", "2");
                            put(
                                "id33",
                                new HashMap<String, String>() {
                                    {
                                        put("id333", "value1");
                                    }
                                }
                            );
                        }
                    },
                    true
                )
                .get()
                .asMap()
                .hashCode(),
            new HashMap<>() {
                {
                    put("id11", "1");
                    put("id22", "2");
                    put(
                        "id33",
                        new HashMap<String, String>() {
                            {
                                put("id333", "value1");
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        assertTrue(json.point(".ListMap[0].id3[0][2]").has());

        assertEquals(
            json.point(".ListMap[*].id1-null-1", "fix").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );
        assertEquals(
            json.point(".ListMap[*].id1-null-1", "fix", true).get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );
        assertEquals(
            json.point(".ListMap[*].id1-null-1").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        System.out.println(json.point(".ListMap[*].id3[*][*].id11-null", "fix").get().asList(String.class));
        assertEquals(
            json.point(".ListMap[*].id3[*][*].id11-null", "fix").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("1");
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );
        assertEquals(
            json.point(".ListMap[*].id3[*][*].id11-null", "fix", true).get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("1");
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );
        assertEquals(
            json.point(".ListMap[*].id3[*][*].id11-null").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("1");
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.point(".ListMap[1].id3[*][*].id11-null-null", "fix").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                }
            }
                .hashCode()
        );
        Assertions.assertFalse(json.point(".ListMap[1].id3[*][*].id11-null-null").has());
        assertEquals(
            json
                .point(".ListMap[1].id3[*][*].id11-null-null", "fix", true)
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                }
            }
                .hashCode()
        );
        assertTrue(json.point(".ListMap[1].id3[*][*].id11-null-null").has());

        assertEquals(
            json
                .point(".ListMap[*].id3[*][*].id33.id333-null-null", "fix")
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );
        assertEquals(
            json
                .point(".ListMap[*].id3[*][*].id33.id333-null-null", "fix", true)
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );
        assertEquals(
            json.point(".ListMap[*].id3[*][*].id33.id333-null-null").get().asList(String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray
                .point(".[0].ListMap[*].id3[*][*].id33.id333-null", "fix")
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );
        assertEquals(
            jsonArray
                .point(".[0].ListMap[*].id3[*][*].id33.id333-null", "fix", true)
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );
        assertEquals(
            jsonArray
                .point(".[0].ListMap[*].id3[*][*].id33.id333-null")
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray
                .point(".[0].ListMap[*].id3[*][*].id33.id333-null", () -> "fix")
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );
        assertEquals(
            jsonArray
                .point(".[0].ListMap[*].id3[*][*].id33.id333-null", () -> "fix", true)
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );
        assertEquals(
            jsonArray
                .point(".[0].ListMap[*].id3[*][*].id33.id333-null")
                .get()
                .asList(String.class)
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            json
                .point(".ListMap[0].id3[0][0].id331.id333-null-hashmap")
                .defaultValue(
                    new DefaultValueMap() {
                        {
                            put(
                                ".ListMap[0].id3[0][0].id331",
                                new HashMap<String, Object>() {
                                }
                            );
                            put(".ListMap[0].id3[0][0].id331.id333-null-hashmap", "fix");
                        }
                    }
                )
                .get()
                .asString(),
            "fix"
        );
        assertEquals(
            json
                .point(".ListMap[0].id3[0][0].id331.id333-null-hashmap")
                .defaultValue(
                    new DefaultValueMap() {
                        {
                            put(
                                ".ListMap[0].id3[0][0].id331",
                                new HashMap<String, Object>() {
                                }
                            );
                            put(".ListMap[0].id3[0][0].id331.id333-null-hashmap", "fix");
                        }
                    },
                    true
                )
                .get()
                .asString(),
            "fix"
        );
        assertEquals(
            json.point(".ListMap[0].id3[0][0].id331.id333-null-hashmap").get().asString(),
            "fix"
        );
    }

    @Test
    void config() {
        assertTrue(JSON
            .config()
            .features(
                new HashMap<>() {
                    {
                        put(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES, true); //允许key名不写引号
                    }
                }
            )
            .serializationInclusion(JsonInclude.Include.NON_NULL)
            .confirmToCreateMapper()
            .parse("{a:1}")
            .getJacksonNode() instanceof ObjectNode);
    }

    @Test
    void sugar() {
        assertNull(JSON.nullNode().point().get().asNull());

        assertTrue(JSON.nullNode().point().get().isNull());

        assertTrue(JSON.missingNode().point().get().isMissing());

        assertTrue(JSON.parse("qqq").getJacksonNode() instanceof TextNode);

        assertTrue(JSON.parse("{\"a\":1}").getJacksonNode() instanceof ObjectNode);

        assertTrue(JSON.parse("[{\"a\":1}]").getJacksonNode() instanceof ArrayNode);

        System.out.println(
            JSON
                .parse(
                    "{\"int\":1,\"string\":\"2\",\"float\":2.5,\"double\":2.5,\"BigDecimal\":1,\"boolean\":false,\"null\":null,\"map\":{\"a\":\"1\",\"b\":\"2\"},\"JSON.Map\":{\"m1\":\"1\",\"m2\":\"2\"},\"List\":[\"1\",\"2\"],\"ListMap\":[{\"id1\":\"1\",\"id2\":\"2\",\"id3\":[[{\"id11\":\"1\",\"id22\":\"2\",\"id33\":{\"id333\":\"value1\"}}]]},{\"id1\":\"11\",\"id2\":\"22\",\"id3\":[[{\"id11\":\"11\",\"id22\":\"22\",\"id33\":{\"id333\":\"value2\"}}]]}],\"JSON.List\":[1,2,4,5,[6,7]]}"
                )
                .toString(true)
        );

        System.out.println(
            JSON.parse("[{\"map2\":\"2\",\"map1\":\"1\"},{\"map2\":\"22\",\"map1\":\"11\"}]").toString(true)
        );

        System.out.println(JSON.parse(new BigDecimal("1.0")));
    }

    @Test
    void sugarPointGet() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        // System.out.println(json.point(".ListMap[0].id3").get().asString());
        assertEquals(json.getInt(".int"), 1);
        assertEquals(json.getString(".string"), "2");
        assertEquals(json.getFloat(".float"), 2.5f);
        assertEquals(json.getDouble(".double"), 2.5d);
        assertEquals(json.getBigDecimal(".BigDecimal"), BigDecimal.valueOf(1));
        assertEquals(json.getBoolean(".boolean"), false);
        assertNull(json.getNull(".null"));

        assertEquals(
            json.getMap(".map").hashCode(),
            new HashMap<String, String>() {
                {
                    put("a", "1");
                    put("b", "2");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getMap(".\"JSON.Map\"").hashCode(),
            new HashMap<String, String>() {
                {
                    put("m1", "1");
                    put("m2", "2");
                }
            }
                .hashCode()
        );
        assertEquals(
            json.getList(".List", String.class).hashCode(),
            new ArrayList<String>() {
                {
                    add("1");
                    add("2");
                }
            }
                .hashCode()
        );

        assertEquals(json.getString(".map.a"), "1");
        assertEquals(json.getString(".List[0]"), "1");
        assertEquals(json.getString(".ListMap[0].id1"), "1");
        assertEquals(
            json.getList(".ListMap[0].id3[0]").hashCode(),
            new ArrayList<>() {
                {
                    add(
                        new HashMap<>() {
                            {
                                put("id11", "1");
                                put("id22", "2");
                                put(
                                    "id33",
                                    new HashMap<String, String>() {
                                        {
                                            put("id333", "value1");
                                        }
                                    }
                                );
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        assertEquals(
            json.getMap(".ListMap[0].id3[0][0]").hashCode(),
            new HashMap<>() {
                {
                    put("id11", "1");
                    put("id22", "2");
                    put(
                        "id33",
                        new HashMap<String, String>() {
                            {
                                put("id333", "value1");
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        assertEquals(json.getString(".ListMap[0].id1"), "1");
        assertEquals(
            json.getList(".ListMap[*].id1", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("1");
                    add("11");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getList(".ListMap[*].id3[*][*].id11", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("1");
                    add("11");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getList(".ListMap[1].id3[*][*].id11", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("11");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getList(".ListMap[*].id3[*][*].id33.id333", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("value1");
                    add("value2");
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.getList(".[0].ListMap[*].id3[*][*].id33.id333", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add("value1");
                    add("value2");
                }
            }
                .hashCode()
        );

        try {
            json.getString(".ListMap[0].id3[0][0].id331.id333");
            Assertions.fail();
        } catch (NullPointerException error) {
            assertTrue(true);
        } catch (Exception error) {
            fail();
        }
    }

    @Test
    void sugarPointNullable() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        // System.out.println(json.point(".ListMap[0].id3").get(true).asString());
        Assertions.assertNull(json.getNullableInt(".int-null"));
        Assertions.assertNull(json.getNullableString(".string-null"));
        Assertions.assertNull(json.getNullableFloat(".float-null"));
        Assertions.assertNull(json.getNullableDouble(".double-null"));
        Assertions.assertNull(json.getNullableBigDecimal(".BigDecimal-null"));
        Assertions.assertNull(json.getNullableBoolean(".boolean-null"));
        Assertions.assertNull(json.getNullableNull(".null-null"));

        Assertions.assertNull(json.getNullableMap(".map-null"));

        Assertions.assertNull(json.getNullableMap(".\"JSON.Map-null\""));
        Assertions.assertNull(json.getNullableList(".List-null", String.class));

        Assertions.assertNull(json.getNullableString(".map.a-null"));
        Assertions.assertNull(json.getNullableString(".List[3]"));
        Assertions.assertNull(json.getNullableString(".ListMap[0].id0"));
        Assertions.assertNull(json.getNullableList(".ListMap[0].id3[1]"));
        Assertions.assertNull(json.getNullableMap(".ListMap[0].id3[0][1]"));
        assertEquals(
            json.getNullableList(".ListMap[*].id0", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getNullableList(".ListMap-null[*].id0").hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getNullableList(".ListMap[*].id3[*][*].id111", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getNullableList(".ListMap[*].id4[*][*].id111", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getNullableList(".ListMap[1].id3[*][*].id111", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getNullableList(".ListMap[*].id3[*][*].id33.id3333", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.getNullableList(".[0].ListMap[*].id3[*][*].id33.id3333", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.getNullableList(".[2].ListMap[*].id3[*][*].id33.id333", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        Assertions.assertNull(json.getNullableString(".ListMap[0].id3[0][0].id331.id333"));

        Assertions.assertNull(json.getNullableString(".ListMap[3].id3[0][0].id331.id333"));

        Assertions.assertNull(json.getNullableString(".ListMap[0].id33[0][0].id331.id333"));

        Assertions.assertNull(json.getNullableString(".ListMap[0].id3[0][0].id331.id333"));

        assertEquals(
            json.getNullableList(".ListMap1[*].id33[0][0].id331.id333", String.class).hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        Assertions.assertNull(json.getNullableString(".ListMap[0].id3[10][0].id33.id333"));

        assertEquals(
            json.getNullableList(".ListMap[*].id3[10][0].id33.id333").hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.getNullableList(".[3].ListMap[*].id3[*][*].id33.id333").hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.getNullableList(".[3].ListMap[*].id3[*][*].id33.id333").hashCode(),
            new ArrayList<>() {
                {
                    add(null);
                }
            }
                .hashCode()
        );
    }

    @Test
    void sugarPointDefaultValue() {
        JSON json = JSON
            .sPut("int", 1)
            .put("string", "2")
            .put("float", 2.5f)
            .put("double", 2.5d)
            .put("BigDecimal", BigDecimal.valueOf(1))
            .put("boolean", false)
            .put("null", null)
            .put(
                "map",
                new HashMap<String, String>() {
                    {
                        put("a", "1");
                        put("b", "2");
                    }
                }
            )
            .put("JSON.Map", JSON.sPut("m1", "1").put("m2", "2"))
            .put(
                "List",
                new ArrayList<String>() {
                    {
                        add("1");
                        add("2");
                    }
                }
            )
            .put(
                "ListMap",
                JSON.sAdd(
                    JSON
                        .sPut("id1", "1")
                        .put("id2", "2")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1")),
                                    JSON
                                        .sPut("id11-null", "1")
                                        .put("id22", "2")
                                        .put("id33", JSON.sPut("id333", "value1"))
                                )
                            )
                        ),
                    JSON
                        .sPut("id1", "11")
                        .put("id2", "22")
                        .put(
                            "id3",
                            JSON.sAdd(
                                JSON.sAdd(
                                    JSON
                                        .sPut("id11", "11")
                                        .put("id22", "22")
                                        .put("id33", JSON.sPut("id333", "value2"))
                                )
                            )
                        )
                )
            )
            .put(
                "JSON.List",
                JSON
                    .sAdd(1)
                    .add(2, 4)
                    .add(5)
                    .add(
                        new ArrayList<Integer>() {
                            {
                                add(6);
                                add(7);
                            }
                        }
                    )
            );

        JSON jsonArray = JSON.sAdd(json, json);
        System.out.println(json.toString());
        assertEquals(json.getInt(".int-null", 1), 1);
        assertEquals(json.getString(".string-null", "2"), "2");
        assertEquals(json.getFloat(".float-null", 2.5f), 2.5f);
        assertEquals(json.getDouble(".double-null", 2.5d), 2.5d);
        assertEquals(
            json.getBigDecimal(".BigDecimal-null", BigDecimal.valueOf(1)),
            BigDecimal.valueOf(1)
        );
        assertEquals(json.getBoolean(".boolean-null", false), false);
        Assertions.assertNull(json.getNull(".null-null", true));

        assertEquals(
            json
                .getMap(
                    ".map-null",
                    new HashMap<String, String>() {
                        {
                            put("a", "1");
                            put("b", "2");
                        }
                    }
                )
                .hashCode(),
            new HashMap<String, String>() {
                {
                    put("a", "1");
                    put("b", "2");
                }
            }
                .hashCode()
        );

        assertEquals(
            json
                .getMap(
                    ".\"JSON.Map-null\"",
                    new HashMap<String, String>() {
                        {
                            put("m1", "1");
                            put("m2", "2");
                        }
                    }
                )
                .hashCode(),
            new HashMap<String, String>() {
                {
                    put("m1", "1");
                    put("m2", "2");
                }
            }
                .hashCode()
        );
        assertEquals(
            json
                .getList(
                    ".List-null",
                    String.class,
                    new ArrayList<String>() {
                        {
                            add("1");
                            add("2");
                        }
                    }
                )
                .hashCode(),
            new ArrayList<String>() {
                {
                    add("1");
                    add("2");
                }
            }
                .hashCode()
        );

        assertEquals(json.getString(".map.a-null", "1"), "1");
        assertEquals(json.getString(".List[10]", "1"), "1");
        assertEquals(json.getString(".ListMap[0].id1-null", "1"), "1");
        assertEquals(
            json
                .getList(
                    ".ListMap[0].id3[10]",
                    new ArrayList<>() {
                        {
                            add(
                                new HashMap<>() {
                                    {
                                        put("id11", "1");
                                        put("id22", "2");
                                        put(
                                            "id33",
                                            new HashMap<String, String>() {
                                                {
                                                    put("id333", "value1");
                                                }
                                            }
                                        );
                                    }
                                }
                            );
                        }
                    }
                )
                .hashCode(),
            new ArrayList<>() {
                {
                    add(
                        new HashMap<>() {
                            {
                                put("id11", "1");
                                put("id22", "2");
                                put(
                                    "id33",
                                    new HashMap<String, String>() {
                                        {
                                            put("id333", "value1");
                                        }
                                    }
                                );
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        assertEquals(
            json
                .getMap(
                    ".ListMap[0].id3[0][10]",
                    new HashMap<>() {
                        {
                            put("id11", "1");
                            put("id22", "2");
                            put(
                                "id33",
                                new HashMap<String, String>() {
                                    {
                                        put("id333", "value1");
                                    }
                                }
                            );
                        }
                    }
                )
                .hashCode(),
            new HashMap<>() {
                {
                    put("id11", "1");
                    put("id22", "2");
                    put(
                        "id33",
                        new HashMap<String, String>() {
                            {
                                put("id333", "value1");
                            }
                        }
                    );
                }
            }
                .hashCode()
        );
        assertEquals(json.getString(".ListMap[0].id1-null", "1"), "1");
        assertEquals(
            json.getList(".ListMap[*].id1-null", String.class, "fix").hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getList(".ListMap[*].id3[*][*].id11-null", String.class, "fix").hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("1");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getList(".ListMap[1].id3[*][*].id11-null", String.class, "fix").hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getList(".ListMap[*].id3[*][*].id33.id333-null", String.class, "fix").hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray.getList(".[0].ListMap[*].id3[*][*].id33.id333-null", String.class, "fix").hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            jsonArray
                .getList(".[0].ListMap[*].id3[*][*].id33.id333-null", String.class, () -> "fix")
                .hashCode(),
            new ArrayList<>() {
                {
                    add("fix");
                    add("fix");
                    add("fix");
                }
            }
                .hashCode()
        );

        assertEquals(
            json.getString(
                ".ListMap[0].id3[0][0].id331.id333-null",
                new DefaultValueMap() {
                    {
                        put(
                            ".ListMap[0].id3[0][0].id331",
                            new HashMap<String, Object>() {
                            }
                        );
                        put(".ListMap[0].id3[0][0].id331.id333-null", "fix");
                    }
                }
            ),
            "fix"
        );
    }

    @Test
    void dateTimeGet() {
        JSON json = JSON
            .sPut("timestamp", 1657174400)
            .put("milliTimestamp", 1657174400000L)
            .put("date", "2022-07-07")
            .put("dateTime", "2022-07-07 14:05:35");

        System.out.println(json.toString());

        assertEquals(json.point(".timestamp").get().asLocalDateTime(), LocalDateTime.parse("2022-07-07T14:13:20"));
        assertEquals(json.point(".milliTimestamp").get().asLocalDateTime(), LocalDateTime.parse("2022-07-07T14:13:20"));
        assertEquals(json.point(".dateTime").get().asLocalDateTime(), LocalDateTime.parse("2022-07-07T14:05:35"));
        assertEquals(json.point(".date").get().asLocalDateTime(), LocalDateTime.parse("2022-07-07T00:00:00"));

        assertEquals(json.getLocalDateTime(".timestamp"), LocalDateTime.parse("2022-07-07T14:13:20"));
        assertEquals(json.getLocalDateTime(".milliTimestamp"), LocalDateTime.parse("2022-07-07T14:13:20"));
        assertEquals(json.getLocalDateTime(".dateTime"), LocalDateTime.parse("2022-07-07T14:05:35"));
        assertEquals(json.getLocalDateTime(".date"), LocalDateTime.parse("2022-07-07T00:00:00"));
    }

    @Test
    void fixListJSONPutOrAdd() {
        var obj = JSON.parse("{\"id\":\"424C6EB8FDBE4A478C1E420806525D19\",\"from\":40,\"name\":\"test3\",\"alias\":\"82sdsadsadasdsadsaddsadsadsadsacxzcasdsadswqewqewqsdsadsadsaewqe\",\"image\":\"http://dummyimage.com/400x400\",\"price\":13,\"equity\":\"magna dolor\",\"status\":1,\"pattern\":0,\"urlFrom\":0,\"category\":0,\"createdAt\":1670293312,\"describes\":[\"quisnulladasdsadsadsadsadsadsa\",\"quisnulladasdsadsadsadsadsadsa\",\"quisnulladasdsadsadsadsadsadsa\"],\"isDeleted\":0,\"tocBuyUrl\":\"http://vclp.nc/ridspj\",\"supplierId\":0,\"commodityCode\":\"82sdsadsadasdsadsaddsadsadsadsacxzcasdsadswqewqewqsdsadsadsaewqe\",\"createdCoreOrgId\":\"000\"}")
            .getJSON();

        System.out.println(JSON.sPut("timestamp", List.of(obj, 1)));
        System.out.println(JSON.sAdd(List.of(obj, 1)));

    }

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    public static class A {
        private String a;
        private B b;

        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        @Builder
        public static class B {
            private String b;
        }
    }

    @Test
    void assign() {
        A aObj = A.builder().a("a").b(A.B.builder().b("b").build()).build();
        String assign1 = "{\"a\":\"a1\",\"b\":{\"b\":\"b1\"}}";
        A assign2 = A.builder().a("a2").b(A.B.builder().b("b2").build()).build();
        Assertions.assertEquals(JSON.assign(aObj, assign1, assign2).toString(), "{\"a\":\"a2\",\"b\":{\"b\":\"b2\"}}");
    }

    @Test
    void merge() {
        JSON assign1 = JSON.parse("{\"a\":\"a1\",\"b\":{\"b\":\"b1\"}}");
        JSON assign2 = assign1.merge(A.builder().a(null).b(A.B.builder().b("b").build()).build());

        var a = A.builder().a("a").b(A.B.builder().b("b").build()).build();
        var b = A.builder().a(null).b(A.B.builder().b("b").build()).build();

        assign2 = JSON.assign(a, b);
    }

    @Test
    void newObjectAssign() {

        JSON json = JSON.createObject();

        A aObj = A.builder().a("a").b(A.B.builder().b("b").build()).build();

        String assign1 = "{\"a\":\"a1\",\"b\":{\"b\":\"b1\"}}";
        Assertions.assertEquals(json.merge(aObj, assign1).toString(), "{\"a\":\"a1\",\"b\":{\"b\":\"b1\"}}");
        Assertions.assertEquals(json.toString(), "{\"a\":\"a1\",\"b\":{\"b\":\"b1\"}}");
        Assertions.assertEquals(JSON.parse(aObj).toString(), "{\"a\":\"a\",\"b\":{\"b\":\"b\"}}");

        A assign2 = A.builder().a("a2").b(A.B.builder().b("b2").build()).build();
        Assertions.assertEquals(JSON.assign(JSON.createObject(), assign1, assign2).toString(), "{\"a\":\"a2\",\"b\":{\"b\":\"b2\"}}");
        Assertions.assertEquals(assign1, "{\"a\":\"a1\",\"b\":{\"b\":\"b1\"}}");
        Assertions.assertEquals(JSON.parse(assign2).toString(), "{\"a\":\"a2\",\"b\":{\"b\":\"b2\"}}");
    }

    @Test
    void newObjectAssign1() {

        JSON json = JSON.createObject();
        System.out.println(
            json.point("?.renewal?.record").defaultValue(List.of()).get().asList()
        );
    }

    @Test
    void jsonValueToString() {
        JSON json = JSON.sPut("request", java.util.Map.of(
            "modelAndOperation", "|find",
            "params", java.util.Map.of(
                "logic", JSON.sPut("id", "1"),
                "join", List.of(JSON.sPut("ID", "1"), JSON.sPut("ID", "2"))
            )
        ));

        System.out.println(json.toString());
    }

    @Test
    void getAsIf() {
        record Type1(Integer type, Integer key) {
        }
        record Type2(Integer type, String key) {
        }

        var json1 = JSON.sPut("type", 1).put("key", 1);
        var getAs1 = json1.getAsIf(JSON.GetAsIf.of(".type", 1, Type1.class), JSON.GetAsIf.of(".type", 2, Type2.class));
        assertTrue(getAs1 instanceof Type1);

        var getAs11 = json1.getAsIf(j -> {
            if (j.getNullableInt(".type") == 1) {
                return Type1.class;
            } else if (j.getNullableInt(".type") == 2) {
                return Type2.class;
            } else {
                throw new RuntimeException("匹配失败");
            }
        });
        assertTrue(getAs11 instanceof Type1);

        var json2 = JSON.sPut("type", 2).put("key", "2");
        var getAs2 = json2.getAsIf(JSON.GetAsIf.of(".type", 1, Type1.class), JSON.GetAsIf.of(".type", 2, Type2.class));
        assertTrue(getAs2 instanceof Type2);

        var getAs22 = json2.getAsIf(j -> {
            if (j.getNullableInt(".type") == 1) {
                return Type1.class;
            } else if (j.getNullableInt(".type") == 2) {
                return Type2.class;
            } else {
                throw new RuntimeException("匹配失败");
            }
        });
        assertTrue(getAs22 instanceof Type2);
    }

    @Test
    void rmNull() {
        assertEquals("{\"a\":1,\"c\":\"2\"}", JSON.sPut("a", 1).put("b", null).put("c", "2").put("d", null)
            .rmNull()
            .toString());
    }
}
